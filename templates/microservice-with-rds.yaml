# platform-templates/templates/microservice-with-rds.yaml
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: microservice-with-rds-v2
  title: Microservice + AWS RDS (Fixed)
  description: Crea o reutiliza un micro con DB en AWS (Crossplane), K8s manifests y CI.
spec:
  owner: group:platform-team
  type: service
  parameters:
    - title: Datos del servicio
      required: [serviceName, namespace, domain, org]
      properties:
        serviceName: { type: string, pattern: "^[a-z0-9-]+$", description: "nombre corto: p.ej. orders" }
        namespace:   { type: string, pattern: "^[a-z0-9-]+$", description: "namespace K8s: p.ej. team-a" }
        domain:      { type: string, description: "FQDN: p.ej. orders.nttdataco.com" }
        org:         { type: string, description: "Organización o usuario GitHub (ej: mi-org)" }
        team:        { type: string, description: "Nombre del equipo o squad (ej: team-a)" }
        useExistingRepo: { type: boolean, default: true, description: "Si ya creaste el repo a mano, marca true" }
    - title: Repositorio
      properties:
        repoUrl: { type: string, description: "github.com?owner=ORG&repo=ms-<svc>" }
    - title: Parámetros de DB
      properties:
        dbEngine:    { type: string, enum: [postgres, mysql], default: postgres }
        dbVersion:   { type: string, default: "15" }
        dbStorageGi: { type: integer, default: 20 }
        dbInstance:  { type: string, default: "db.t4g.micro" }
    - title: Almacenamiento App
      properties:
        pvcSizeGi:   { type: integer, default: 5 }

  steps:
    # A) Crear repo ÚNICO si no existe
    - id: create-repo
      name: Crear repo del microservicio
      if: ${{ parameters.useExistingRepo == false }}
      action: github:repo:create
      input:
        repoUrl: github.com?owner=${{ parameters.org }}&repo=ms-${{ parameters.serviceName }}
        repoVisibility: private
        description: "Microservice ${{ parameters.serviceName }} - App, K8s manifests y DB claims"

    # B) Generar APP (copia el skeleton app-node a un directorio temporal)
    - id: seed-app
      name: Crear app (Dockerfile + CI)
      action: fetch:template
      input:
        url: ../skeletons/app-node
        targetPath: ./work/app
        values:
          serviceName: ${{ parameters.serviceName }}

    # C) Generar K8s (ns, pvc, deployment, service, ingress)
    - id: seed-k8s
      name: Crear k8s
      action: fetch:template
      input:
        url: ../skeletons/k8s
        targetPath: ./work/k8s
        values:
          serviceName: ${{ parameters.serviceName }}
          namespace:   ${{ parameters.namespace }}
          domain:      ${{ parameters.domain }}
          pvcSizeGi:   ${{ parameters.pvcSizeGi }}

    # D) Generar Claim de DB (Crossplane)
    - id: seed-claim
      name: Generar claim DB (Crossplane)
      action: fetch:template
      input:
        url: ../skeletons/claim-db
        targetPath: ./work/claims
        values:
          serviceName: ${{ parameters.serviceName }}
          namespace:   ${{ parameters.namespace }}
          dbEngine:    ${{ parameters.dbEngine }}
          dbVersion:   ${{ parameters.dbVersion }}
          dbStorageGi: ${{ parameters.dbStorageGi }}
          dbInstance:  ${{ parameters.dbInstance }}

    # E) Publicar TODO en un solo repo
    - id: publish-microservice
      name: Publicar microservicio completo
      action: github:repo:push
      input:
        repoUrl: github.com?owner=${{ parameters.org }}&repo=ms-${{ parameters.serviceName }}
        defaultBranch: main
        sourcePath: ./work
        gitCommitMessage: "Microservice ${{ parameters.serviceName }} scaffolded - ${{ '' | now }}"
        gitAuthorName: "Backstage Scaffolder"
        gitAuthorEmail: "scaffolder@backstage.io"

  output:
    links:
      - title: Microservice Repository
        url: ${{ steps.publish-microservice.output.remoteUrl }}
      - title: App Code
        url: ${{ steps.publish-microservice.output.remoteUrl }}/tree/main/app
      - title: K8s Manifests
        url: ${{ steps.publish-microservice.output.remoteUrl }}/tree/main/k8s
      - title: DB Claims
        url: ${{ steps.publish-microservice.output.remoteUrl }}/tree/main/claims
