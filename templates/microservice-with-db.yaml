# platform-templates/templates/microservice-with-rds.yaml
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: microservice-with-db
  title: Microservice + Database
  description: Crea o reutiliza un micro con DB en AWS (Crossplane), K8s manifests y CI.
spec:
  owner: group:platform-team
  type: service
  parameters:
    - title: App Info
      required: [appName, namespace, image, port]
      properties:
        appName:
          type: string
          title: App name
        namespace:
          type: string
          title: Kubernetes namespace
        image:
          type: string
          title: Container image
        port:
          type: number
          title: Container port
          default: 8080
        replicas:
          type: number
          default: 2
        env:
          type: string
          title: Environment
          default: prod
        cpuRequest:
          type: string
          default: "100m"
        memRequest:
          type: string
          default: "128Mi"
        cpuLimit:
          type: string
          default: "500m"
        memLimit:
          type: string
          default: "512Mi"
    - title: Ingress (Gateway API)
      properties:
        hostname:
          type: string
          title: Hostname (FQDN)
          default: ""
        gatewayName:
          type: string
          default: "shared-gw"
        gatewayNamespace:
          type: string
          default: "networking"
    - title: Storage
      properties:
        storageClass:
          type: string
          default: "gp3"
        pvcSize:
          type: string
          default: "10Gi"
        mountPath:
          type: string
          default: "/data"
    - title: Database
      properties:
        db:
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            claimApiVersion:
              type: string
              default: "database.example.org/v1alpha1"
            claimKind:
              type: string
              default: "PostgreSQLInstance"
            claimName:
              type: string
              default: "db"
            engine:
              type: string
              default: "postgres"
            version:
              type: string
              default: "15"
            instanceSize:
              type: string
              default: "db.t3.micro"
            storageGB:
              type: number
              default: 20
            dbName:
              type: string
              default: ""
            username:
              type: string
              default: "appuser"
            publiclyAccessible:
              type: boolean
              default: false

  steps:
    - id: write-appstack-request
      name: Write AppStack Request
      action: roadiehq:utils:fs:write
      input:
        path: appstack-request.yaml
        content: |
          {{#with parameters}}
          apiVersion: platform.example.io/v1alpha1
          kind: AppStack
          metadata:
            name: {{ appName }}
            namespace: kratix-system
          spec:
            appName: {{ appName }}
            namespace: {{ namespace }}
            image: {{ image }}
            imagePullPolicy: IfNotPresent
            replicas: {{ replicas }}
            port: {{ port }}
            env:
              - name: ENV
                value: {{ env }}
            resources:
              requests:
                cpu: {{ cpuRequest }}
                memory: {{ memRequest }}
              limits:
                cpu: {{ cpuLimit }}
                memory: {{ memLimit }}
            serviceType: ClusterIP
            gateway:
              hostname: {{ hostname }}
              gatewayName: {{ gatewayName }}
              gatewayNamespace: {{ gatewayNamespace }}
            pvc:
              storageClassName: {{ storageClass }}
              size: {{ pvcSize }}
              mountPath: {{ mountPath }}
            database:
              enabled: {{ db.enabled }}
              claimApiVersion: {{ db.claimApiVersion }}
              claimKind: {{ db.claimKind }}
              claimName: {{ db.claimName }}
              parameters:
                engine: {{ db.engine }}
                version: {{ db.version }}
                instanceSize: {{ db.instanceSize }}
                storageGB: {{ db.storageGB }}
                dbName: {{ db.dbName }}
                username: {{ db.username }}
                publiclyAccessible: {{ db.publiclyAccessible }}
          {{/with}}

