apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: app-model-a-request
  title: Deploy AppModelA Application (with Random Suffix)
  description: Creates a request for deploying an application using AppModelA Promise in Kratix with unique random naming
  tags:
    - kratix
    - application
    - kubernetes
    - deployment
    - random-naming
spec:
  owner: platform-team
  type: service
  parameters:
    - title: Application Information
      required:
        - appName
        - targetNamespace
        - image
      properties:
        appName:
          title: Application Name
          type: string
          description: Base name of your application (a random suffix will be added)
          pattern: '^[a-z0-9-]+$'
          ui:autofocus: true
          ui:help: "Only lowercase letters, numbers and hyphens allowed. A random suffix will be automatically added."
        targetNamespace:
          title: Target Namespace
          type: string
          description: Kubernetes namespace where the application will be deployed
          default: "default"
          pattern: '^[a-z0-9-]+$'
          ui:help: "Namespace must exist in the target cluster"
        image:
          title: Container Image
          type: string
          description: Full container image path (registry/image:tag)
          default: "nginx:latest"
          ui:help: "Example: registry.hub.docker.com/library/nginx:1.21"
        port:
          title: Application Port
          type: integer
          description: Port where the application listens
          default: 80
          minimum: 1
          maximum: 65535
        replicas:
          title: Number of Replicas
          type: integer
          description: Number of pod replicas to deploy
          default: 1
          minimum: 1
          maximum: 10
        serviceType:
          title: Service Type
          type: string
          description: Kubernetes service type
          default: "ClusterIP"
          enum:
            - ClusterIP
            - NodePort
            - LoadBalancer
        imagePullPolicy:
          title: Image Pull Policy
          type: string
          description: Image pull policy for containers
          default: "Always"
          enum:
            - Always
            - IfNotPresent
            - Never
        gatewayEnabled:
          title: Enable Gateway
          type: boolean
          description: Enable ingress gateway for external access
          default: false
        gatewayHostname:
          title: Gateway Hostname
          type: string
          description: Hostname for the gateway (if enabled)
          default: ""
        gatewayPath:
          title: Gateway Path
          type: string
          description: Path prefix for the gateway
          default: "/"
        gatewayTls:
          title: Enable TLS
          type: boolean
          description: Enable TLS for the gateway
          default: false
        storageEnabled:
          title: Enable Storage
          type: boolean
          description: Enable persistent storage
          default: false
        storageSize:
          title: Storage Size
          type: string
          description: Size of persistent storage (if enabled)
          default: "1Gi"
        storageMountPath:
          title: Storage Mount Path
          type: string
          description: Mount path for persistent storage
          default: "/data"
        storageClass:
          title: Storage Class
          type: string
          description: Kubernetes storage class
          default: "gp3"
        databaseEnabled:
          title: Enable Database
          type: boolean
          description: Enable database for the application
          default: false
        databaseType:
          title: Database Type
          type: string
          description: Type of database (if enabled)
          default: "postgresql"
          enum:
            - postgresql
            - mysql
            - mongodb
        databaseStorageGB:
          title: Database Storage (GB)
          type: integer
          description: Database storage size in GB
          default: 10
          minimum: 5
          maximum: 100
        databaseInstanceSize:
          title: Database Instance Size
          type: string
          description: Database instance size
          default: "small"
          enum:
            - small
            - medium
            - large
        timestamp:
          title: Timestamp
          type: string
          description: Creation timestamp
          default: ""
          ui:widget: "hidden"

  steps:
    # NUEVO STEP: Generar sufijo aleatorio
    - id: generate-unique-suffix
      name: Generate Unique Suffix
      action: ntt:utils:randomSuffix
      input:
        length: 4
        type: 'alphanumeric'
        prefix: '-'

    # STEP MODIFICADO: Usar el sufijo en el template
    - id: fetch
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ../skeletons/app-model-a-request
        values:
          # Usar el sufijo aleatorio para crear nombres únicos
          appName: ${{ parameters.appName }}${{ steps['generate-unique-suffix'].output.fullSuffix }}
          baseAppName: ${{ parameters.appName }}
          uniqueSuffix: ${{ steps['generate-unique-suffix'].output.suffix }}
          targetNamespace: ${{ parameters.targetNamespace }}${{ steps['generate-unique-suffix'].output.fullSuffix }}
          image: ${{ parameters.image }}
          port: ${{ parameters.port | default(80) }}
          replicas: ${{ parameters.replicas | default(1) }}
          serviceType: ${{ parameters.serviceType | default('ClusterIP') }}
          imagePullPolicy: ${{ parameters.imagePullPolicy | default('Always') }}
          gatewayEnabled: ${{ parameters.gatewayEnabled | default(false) }}
          gatewayHostname: ${{ parameters.gatewayHostname | default('') }}
          gatewayPath: ${{ parameters.gatewayPath | default('/') }}
          gatewayTls: ${{ parameters.gatewayTls | default(false) }}
          storageEnabled: ${{ parameters.storageEnabled | default(false) }}
          storageSize: ${{ parameters.storageSize | default('1Gi') }}
          storageMountPath: ${{ parameters.storageMountPath | default('/data') }}
          storageClass: ${{ parameters.storageClass | default('gp3') }}
          databaseEnabled: ${{ parameters.databaseEnabled | default(false) }}
          databaseType: ${{ parameters.databaseType | default('postgresql') }}
          databaseStorageGB: ${{ parameters.databaseStorageGB | default(10) }}
          databaseInstanceSize: ${{ parameters.databaseInstanceSize | default('small') }}
          requestNamespace: "kratix-system"
          # Usar el nombre único con sufijo para identificadores
          uniqueName: "${{ parameters.appName }}${{ steps['generate-unique-suffix'].output.fullSuffix }}"
          uniqueFilename: "${{ parameters.appName }}-${{ steps['generate-unique-suffix'].output.suffix }}-${{ parameters.targetNamespace }}-request"
          # Variables adicionales para metadatos
          randomId: "${{ steps['generate-unique-suffix'].output.suffix }}"
          timestamp: "${{ parameters.timestamp | default('2024-01-01T00:00:00Z') }}"

    - id: publish
      name: Publish to platform-workflow
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=platform-workflow&owner=hogonzalezve
        branchName: "app-request-${{ parameters.appName }}-${{ steps['generate-unique-suffix'].output.suffix }}"
        title: "Deploy ${{ parameters.appName }}${{ steps['generate-unique-suffix'].output.fullSuffix }} via AppModelA"
        description: |
          ## New AppModelA Application Request with Unique Naming
          
          **Application:** ${{ parameters.appName }}${{ steps['generate-unique-suffix'].output.fullSuffix }}
          **Base Name:** ${{ parameters.appName }}
          **Unique Suffix:** ${{ steps['generate-unique-suffix'].output.suffix }}
          **Namespace:** ${{ parameters.targetNamespace }}
          **Image:** ${{ parameters.image }}
          **Replicas:** ${{ parameters.replicas }}
          
          This deployment uses an automatically generated unique suffix to prevent naming conflicts.
        targetPath: kratix/requests
        update: true

  output:
    links:
      - title: Repository Commit
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Application Request File
        url: "${{ steps.publish.output.remoteUrl }}/blob/main/kratix/requests/${{ parameters.appName }}-${{ steps['generate-unique-suffix'].output.suffix }}-${{ parameters.targetNamespace }}-request.yaml"
      - title: ArgoCD Applications
        url: https://argocd.your-domain.com/applications
      - title: Kratix Platform State
        url: https://github.com/hogonzalezve/platform-state
    text:
      - title: Generated Application Name
        content: "${{ parameters.appName }}${{ steps['generate-unique-suffix'].output.fullSuffix }}"
      - title: Unique Suffix
        content: "${{ steps['generate-unique-suffix'].output.suffix }}"